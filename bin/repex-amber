#!/usr/bin/env python

import os
import sys
import json
from os import path
import radical.utils.logger as rul
from repex_utils.replica_cleanup import *
from repex_utils.parser import parse_command_line

from pilot_kernels.pilot_kernel_pattern_s_multi_d_sc import PilotKernelPatternSmultiDsc
from pilot_kernels.pilot_kernel_pattern_s_multi_d_scg import PilotKernelPatternSmultiDscg

from amber_kernel.kernel_pattern_s import KernelPatternS

#-------------------------------------------------------------------------------

if __name__ == '__main__':

	name = 'amber'
	logger  = rul.getLogger ('radical.repex', name)

	work_dir_local = os.getcwd()
	params = parse_command_line()

	# get remd_input file
	json_data=open(params.remd_input)
	inp_file = json.load(json_data)
	json_data.close()

	# get resource config
	json_data=open(params.resource_config)
	rconfig = json.load(json_data)
	json_data.close()

	group_exec = inp_file['remd.input'].get('group_exec', 'False')

	if (inp_file['remd.input']['re_pattern'] == 'S') and (group_exec == 'True'):

		# initializing kernels
		md_kernel    = KernelPatternS( inp_file, rconfig, work_dir_local )
		pilot_kernel = PilotKernelPatternSmultiDscg( inp_file, rconfig )

		# initializing replicas
		replicas = md_kernel.initialize_replicas()

	if (inp_file['remd.input']['re_pattern'] == 'S') and (group_exec == 'False'):

		# initializing kernels
		md_kernel    = KernelPatternS( inp_file, rconfig, work_dir_local )
		pilot_kernel = PilotKernelPatternSmultiDsc( inp_file, rconfig )

		# initializing replicas
		replicas = md_kernel.initialize_replicas()

	#---------------------------------------------------------------------------
	# the same for all cases
	try:
		pilot_manager, pilot_object, session = pilot_kernel.launch_pilot()

		# now we can run RE simulation
		pilot_kernel.run_simulation( replicas, pilot_object, session, md_kernel )

	except:
		raise
	try:
		# finally we are moving all files to individual replica directories
		move_output_files(work_dir_local, md_kernel, replicas ) 

		logger.info("Simulation successfully finished!")
		logger.info("Please check output files in replica_x directories.")
	except:
		logger.info("Unexpected error: {0}".format(sys.exc_info()[0]) )
		raise 
	finally :
		logger.info("Closing session.")
		session.close (cleanup=True, terminate=True)  

