#!/usr/bin/env python

import os
import sys
import json
from os import path
from repex_utils.replica_cleanup import *
from repex_utils.parser import parse_command_line

from execution_management_modules.exec_mng_module_pattern_s    import ExecutionManagementModulePatternS
from execution_management_modules.exec_mng_module_pattern_s_gr import ExecutionManagementModulePatternSgroup
from execution_management_modules.exec_mng_module_pattern_a    import ExecutionManagementModulePatternA

from application_management_modules.amm_amber import AmmAmber

#-------------------------------------------------------------------------------

if __name__ == '__main__':

    work_dir_local = os.getcwd()
    params = parse_command_line()

    # get remd_input file
    json_data=open(params.remd_input)
    inp_file = json.load(json_data)
    json_data.close()

    # get resource config
    json_data=open(params.resource_config)
    rconfig = json.load(json_data)
    json_data.close()

    group_exec = inp_file['remd.input'].get('group_exec', 'False')

    amm = AmmAmber( inp_file, rconfig, work_dir_local )

    if (inp_file['remd.input']['re_pattern'] == 'S') and (group_exec == 'True'):

        emm = ExecutionManagementModulePatternSgroup( inp_file, rconfig, amm.logger )

        replicas = amm.initialize_replicas()

    if (inp_file['remd.input']['re_pattern'] == 'A') and (group_exec == 'False'):

        emm = ExecutionManagementModulePatternA( inp_file, rconfig, amm.logger )

        if amm.restart_done == True:
            replicas = amm.initialize_replicas()
        else:
            replicas = amm.recover_replicas()
		
    if (inp_file['remd.input']['re_pattern'] == 'S') and (group_exec == 'False'):

        emm = ExecutionManagementModulePatternS( inp_file, rconfig, amm.logger )

        if amm.restart_done == True:
            replicas = amm.initialize_replicas()
        else:
            replicas = amm.recover_replicas()

    #---------------------------------------------------------------------------
    # the same for all cases
    try:
        emm.launch_pilot()
        # now we can run RE simulation
        emm.run_simulation( replicas, amm )
    except (KeyboardInterrupt, SystemExit) as e:
        raise
        emm.logger.info("Exit requested...")
        emm.session.close (cleanup=True, terminate=True)
        sys.exit(1)
    except:
        raise
        emm.logger.info("Unexpected error: {0}".format(sys.exc_info()[0]) )
        emm.session.close (cleanup=True, terminate=True)
        sys.exit(1)
    try:
        # finally we are moving all files to individual replica directories
        move_output_files(work_dir_local, amm, replicas ) 
        emm.logger.info("Simulation successfully finished!")
    except:
        raise
        emm.logger.info("Unexpected error: {0}".format(sys.exc_info()[0]) )
        emm.session.close (cleanup=True, terminate=True)
        sys.exit(1)
    finally :
        emm.logger.info("Closing session.")
        emm.session.close (cleanup=True, terminate=True)
		