#!/usr/bin/env python

__copyright__ = "Copyright 2013-2014, http://radical.rutgers.edu"
__license__ = "MIT"

import os
import sys
import json
from os import path
from radical.ensemblemd import ResourceHandle
from radical.ensemblemd import EnsemblemdError
from repex_utils.parser import parse_cmd_repex
from repex_utils.replica_cleanup import move_output_files
from application_management_modules.amm_amber import AmmAmber

#-------------------------------------------------------------------------------

if __name__ == '__main__':

    work_dir_local = os.getcwd()
    params = parse_cmd_repex()

    # get remd_input file
    json_data=open(params.remd_input)
    inp_file = json.load(json_data)
    json_data.close()

    # get resource config
    json_data=open(params.resource_config)
    rconfig = json.load(json_data)
    json_data.close()

    # Create a new static execution context with one resource and a fixed
    # number of cores and runtime.

    cluster = ResourceHandle(
        resource    =rconfig.get('resource'),
        cores       =int(rconfig.get('cores')),
        walltime    =int(rconfig.get('runtime')),
        username    =rconfig.get('username'), 
        project     =rconfig.get('project'),
        queue       =rconfig.get('queue'),
        database_url=rconfig.get('mongo_url')
    )

    sync       = inp_file['remd.input'].get('sync', 'S')
    group_exec = inp_file['remd.input'].get('group_exec', 'False')

    try:
        # Allocate the resources.
        cluster.allocate()

        # creating pattern object (re_pattern == amm)
        amm = AmmAmber(inp_file, rconfig, work_dir_local)

        if amm.do_restart == False:
            replicas = amm.initialize_replicas()
        else:
            replicas = amm.recover_replicas()

        amm.add_replicas(replicas)

        if (sync == 'S') and (group_exec == 'False'):
            cluster.run(amm, force_plugin="replica_exchange.static_pattern_3")

        if (sync == 'A') and (group_exec == 'False'):
            cluster.run(amm, force_plugin="replica_exchange.static_pattern_4")

        if (sync == 'S') and (group_exec == 'True'):
            cluster.run(amm, force_plugin="replica_exchange.static_pattern_5")
    except EnsemblemdError, er:
        print "Ensemble MD Toolkit Error: {0}".format(str(er))
        raise

    try:
        cluster.deallocate()
    except:
        pass

    try:
        move_output_files(work_dir_local) 
    except:
        raise
        print "Unexpected error: {0}".format(sys.exc_info()[0]) 
        sys.exit(1)

