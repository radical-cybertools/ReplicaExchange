#!/usr/bin/python2.7

import os
import sys
import time
import math
import json
import optparse
import datetime
import radical.pilot
from pprint import pprint
from random import randint

PWD = os.path.dirname(os.path.abspath(__file__))

#-----------------------------------------------------------------------------------------------------------------------------------

class Replica(object):

    def __init__(self, my_id, new_temperature = None):
        self.id = my_id
        self.partner = -1
        self.state = 'initialized'
        self.cycle = 0
        if new_temperature is None:
            self.new_temperature = 0
        else:
            self.new_temperature = new_temperature
        self.old_temperature = new_temperature
        self.new_coor = ""
        self.new_vel = ""
        self.new_history = ""
        self.new_ext_system = "" 
        self.old_coor = ""
        self.old_vel = ""
        self.old_ext_system = "" 
        self.swap = 0

#-----------------------------------------------------------------------------------------------------------------------------------

class ReplicaExchange(object):

    def __init__(self, inp_file, r_config ):
        # resource configuration file
        self.rconfig = r_config
        
        # pilot parameters
        self.resource = inp_file['input.PILOT']['resource']
        self.sandbox = inp_file['input.PILOT']['sandbox']
        self.cores = int(inp_file['input.PILOT']['cores'])
        self.runtime = int(inp_file['input.PILOT']['runtime'])
        self.dburl = inp_file['input.PILOT']['mongo_url']
        self.cleanup = inp_file['input.PILOT']['cleanup']

        # NAMD parameters
        self.namd_path = inp_file['input.NAMD']['namd_path']
        self.inp_basename = inp_file['input.NAMD']['input_file_basename']
        self.namd_structure = inp_file['input.NAMD']['namd_structure']
        self.namd_coordinates = inp_file['input.NAMD']['namd_coordinates']
        self.namd_parameters = inp_file['input.NAMD']['namd_parameters']
        self.replicas = int(inp_file['input.NAMD']['number_of_replicas'])
        self.min_temp = float(inp_file['input.NAMD']['min_temperature'])
        self.max_temp = float(inp_file['input.NAMD']['max_temperature'])
        self.cycle_steps = int(inp_file['input.NAMD']['steps_per_cycle'])
        self.nr_cycles = int(inp_file['input.NAMD']['number_of_cycles'])

        # check if all required params are specified
        self.check_parameters()

#-----------------------------------------------------------------------------------------------------------------------------------

    def check_parameters(self):
        """ 
        Check that required parameters are specified.
        """ 
        # Required Options
        #############################
        # pilot parameters
        if self.resource is None:
            sys.exit('Resource name (resource) is not specified in input.PILOT!')
        elif self.sandbox is None:
            sys.exit('Working directory (sandbox) is not specified in input.PILOT!')
        elif self.cores is None:
            sys.exit('Number of cores (cores) is not specified in input.PILOT!')
        elif self.runtime is None:
            sys.exit('Total simulation runtime (runtime) is not specified in input.PILOT!')
        elif self.dburl is None:
            sys.exit('Mongo DB url (mongo_url) is not specified in input.PILOT!')    
        elif self.cleanup is None:
            sys.exit('cleanup is not specified in input.PILOT!') 

        # namd parameters
        if self.namd_path is None:
            sys.exit('Path to NAMD executable (namd_path) is not specified in input.NAMD!')
        elif self.inp_basename is None:
            sys.exit('Base name for NAMD simulation input file (input_file_basename) is not specified in input.NAMD!')
        elif self.namd_structure is None:
            sys.exit('NAMD structure (namd_structure) is not specified in input.NAMD!')     
        elif self.namd_coordinates is None:
            sys.exit('NAMD coordinates (namd_coordinates) is not specified in input.NAMD!')  
        elif self.namd_parameters is None:
            sys.exit('NAMD parameters (namd_parameters) is not specified in input.NAMD!')      
        elif self.replicas is None:
            sys.exit('Number of replicas for NAMD simulation (number_of_replicas) is not specified in input.NAMD!')
        elif self.min_temp is None:
            sys.exit('NAMD simulation minimum temperature (min_temperature) is not specified in input.NAMD!')
        elif self.max_temp is None:
            sys.exit('NAMD simulation maximum temperature (max_temperature) is not specified in input.NAMD!')
        elif self.cycle_steps is None:
            sys.exit('Steps per NAMD simulation cycle (steps_per_cycle) is not specified in input.NAMD!')
        elif self.nr_cycles is None:
            sys.exit('Number of NAMD simulation cycles is not specified in input.NAMD!')

#----------------------------------------------------------------------------------------------------------------------------------

    def exchange_accept(self, replica, replicas):

        do = randint(0,1)

        if do:
            r_pair = replicas[ randint(0,5) ]
            return r_pair
        else:
            return replica

        #kb = 0.0019872041
        #i_stateid = self.status[repl_i]['stateid_current']
        #i_temp = self.stateparams[i_stateid]['newtemp']

        #i_cycle = self.status[repl_i]['cycle_current']
        #i_results = self._getTempPot(repl_i,i_cycle)
        #i_pot = i_results[1]

        #i_pot = self.stateparams[i_stateid]['potential']

        #for repl_j in replicas_waiting:
        #    j_stateid = self.status[repl_j]['stateid_current']
        #    j_temp = self.stateparams[j_stateid]['newtemp']

        #    j_cycle = self.status[repl_j]['cycle_current']
        #    j_results = self._getTempPot(repl_j,j_cycle)
        #    j_pot = j_results[1]

            #j_pot = self.stateparams[j_stateid]['potential']
        #    dbeta = ((1./i_temp) - (1./j_temp)) / kb
        #    delta = dbeta * (j_pot - i_pot)
        #    swp = ( delta < 0. ) or (( -1. * delta ) > random.random())
        #    if swp:
                #replica_j = replicas_waiting[repl_j]
        #       return repl_j

#----------------------------------------------------------------------------------------------------------------------------------

    def get_historical_data(self, replica, cycle):
        """
        """
        data = []
        if not os.path.exists(replica.new_history):
            print "history file not found: "
            print replica.new_history
        else:
            f = open(replica.new_history)
            lines = f.readlines()
            f.close()
        for line in lines:
            data.append(line)

        return data[0][0] data[0][1]

#----------------------------------------------------------------------------------------------------------------------------------

    def build_input_file(self, replica):
        """
        Builds input file for replica, based on template input file alanin_base.namd
        """

        basename = self.inp_basename[:-5]
        template = self.inp_basename
            
        new_input_file = "%s_%d_%d.namd" % (basename, replica.id, replica.cycle)
        outputname = "%s_%d_%d_out" % (basename, replica.id, replica.cycle)
        old_name = "%s_%d_%d_out" % (basename, replica.id, (replica.cycle-1))
        replica.new_coor = outputname + ".coor"
        replica.new_vel = outputname + ".vel"
        replica.new_history = outputname + ".history"
        replica.new_ext_system = outputname + ".xsc" 

        historyname = replica.new_history

        replica.old_coor = old_name + ".coor"
        replica.old_vel = old_name + ".vel"
        replica.old_ext_system = old_name + ".xsc" 

        if (replica.cycle == 0):
            first_step = 0
        elif (replica.cycle == 1):
            first_step = int(self.cycle_steps)
        else:
            first_step = (replica.cycle - 1) * int(self.cycle_steps)

        #---------------------------------------------------------------------
        # substituti